// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Transport.Infrastructure.Persistence;

#nullable disable

namespace Transport.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230306105422_a1")]
    partial class a1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Transport.Domain.Entities.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count_Business_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_Econom_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_VIP_Class_Place")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Flight_For")
                        .HasColumnType("text");

                    b.Property<string>("Flight_From")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("airlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("For")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<int?>("OrderForBusId")
                        .HasColumnType("integer");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("bus");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<int?>("Place_in_Ticket")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.ToTable("placeAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceTrain", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Place_in_Ticket")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.ToTable("placeTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("For")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<int?>("PlaceAirlineId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaceAirlineId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ticketAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketBus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("UserId");

                    b.ToTable("ticketBuses");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PassergerForTrainId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlaceTrainId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaceTrainId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ticketTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Count_Business_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_Econom_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_VIP_Class_Place")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("For")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("trains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Transport.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Transport.Domain.Entities.User");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Airline", "Airline")
                        .WithMany("PlaceAirlines")
                        .HasForeignKey("AirlineId");

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Train", "Train")
                        .WithMany("PlaceTrains")
                        .HasForeignKey("TrainId");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.PlaceAirline", "PlaceAirline")
                        .WithOne("TicketAirline")
                        .HasForeignKey("Transport.Domain.Entities.TicketAirline", "PlaceAirlineId");

                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("TicketAirlines")
                        .HasForeignKey("UserId");

                    b.Navigation("PlaceAirline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketBus", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Bus", "Bus")
                        .WithMany("TicketBuses")
                        .HasForeignKey("BusId");

                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("TicketBuses")
                        .HasForeignKey("UserId");

                    b.Navigation("Bus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.PlaceTrain", "PlaceTrains")
                        .WithOne("TicketTrain")
                        .HasForeignKey("Transport.Domain.Entities.TicketTrain", "PlaceTrainId");

                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("TicketTrains")
                        .HasForeignKey("UserId");

                    b.Navigation("PlaceTrains");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Admin", b =>
                {
                    b.HasOne("Transport.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Transport.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transport.Domain.Entities.Airline", b =>
                {
                    b.Navigation("PlaceAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Bus", b =>
                {
                    b.Navigation("TicketBuses");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceAirline", b =>
                {
                    b.Navigation("TicketAirline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceTrain", b =>
                {
                    b.Navigation("TicketTrain");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Train", b =>
                {
                    b.Navigation("PlaceTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.User", b =>
                {
                    b.Navigation("TicketAirlines");

                    b.Navigation("TicketBuses");

                    b.Navigation("TicketTrains");
                });
#pragma warning restore 612, 618
        }
    }
}
