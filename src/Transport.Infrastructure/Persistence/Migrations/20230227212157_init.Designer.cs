// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Transport.Infrastructure.Persistence;

#nullable disable

namespace Transport.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230227212157_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Transport.Domain.Entities.Airline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Count_Business_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_Econom_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_VIP_Class_Place")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Flight_For")
                        .HasColumnType("text");

                    b.Property<string>("Flight_From")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("airlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Bus", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("For")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<int?>("OrderForBusId")
                        .HasColumnType("integer");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderForBusId");

                    b.ToTable("bus");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Total_Sum")
                        .HasColumnType("double precision");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ordersForAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForBus", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Total_Sum")
                        .HasColumnType("double precision");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ordersForBuses");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Total_Sum")
                        .HasColumnType("double precision");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ordersForTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderTicketAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("OrderForAirlineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderForAirlineId");

                    b.ToTable("orderTicketAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PassengerForAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("OrderTicketAirlineId")
                        .HasColumnType("integer");

                    b.Property<string>("Pasport_Series")
                        .HasColumnType("text");

                    b.Property<string>("SHJR")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderTicketAirlineId");

                    b.ToTable("passengerForAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<int?>("Place_in_Ticket")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketAirlineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("TicketAirlineId");

                    b.ToTable("placeAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceTrain", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Place_in_Ticket")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TicketTrainId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketTrainId");

                    b.HasIndex("TrainId");

                    b.ToTable("placeTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketAirline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("PassengerForAirlineId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PassengerForAirlineId")
                        .IsUnique();

                    b.ToTable("ticketAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PassergerForTrainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PassergerForTrainId")
                        .IsUnique();

                    b.ToTable("ticketTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Train", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Count_Business_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_Econom_Class_Place")
                        .HasColumnType("integer");

                    b.Property<int?>("Count_VIP_Class_Place")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("For")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("trains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.OrderTicketTrain", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("OrederForTrainId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrederForTrainId");

                    b.ToTable("orderTicketTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.PassengerForTrain", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("OrderTicketTrainId")
                        .HasColumnType("integer");

                    b.Property<string>("Pasport_Series")
                        .HasColumnType("text");

                    b.Property<string>("SHJR")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderTicketTrainId");

                    b.ToTable("passengerForTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Transport.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Transport.Domain.Entities.User");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Transport.Domain.Entities.Bus", b =>
                {
                    b.HasOne("Transport.Domain.Entities.OrderForBus", "OrderForBus")
                        .WithMany("Buses")
                        .HasForeignKey("OrderForBusId");

                    b.Navigation("OrderForBus");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("OrderForAirlines")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForBus", b =>
                {
                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("OrderForBuses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.User", "User")
                        .WithMany("OrderForTrains")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderTicketAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.OrderForAirline", "OrderForAirline")
                        .WithMany("OrderTicketAirlines")
                        .HasForeignKey("OrderForAirlineId");

                    b.Navigation("OrderForAirline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PassengerForAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.OrderTicketAirline", "OrderTicketAirline")
                        .WithMany("PassengerForAirlines")
                        .HasForeignKey("OrderTicketAirlineId");

                    b.Navigation("OrderTicketAirline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Airline", "Airline")
                        .WithMany("PlaceAirlines")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Transport.Domain.Entities.TicketAirline", "TicketAirline")
                        .WithMany("PlaceAirlines")
                        .HasForeignKey("TicketAirlineId");

                    b.Navigation("Airline");

                    b.Navigation("TicketAirline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PlaceTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.TicketTrain", "TicketTrain")
                        .WithMany("PlaceTrains")
                        .HasForeignKey("TicketTrainId");

                    b.HasOne("Transport.Domain.Entities.Train", "Train")
                        .WithMany("PlaceTrains")
                        .HasForeignKey("TrainId");

                    b.Navigation("TicketTrain");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketAirline", b =>
                {
                    b.HasOne("Transport.Domain.Entities.PassengerForAirline", "PassengerForAirline")
                        .WithOne("TicketAirlines")
                        .HasForeignKey("Transport.Domain.Entities.TicketAirline", "PassengerForAirlineId");

                    b.Navigation("PassengerForAirline");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Traine_Entities.PassengerForTrain", "PassergerForTrain")
                        .WithOne("TicketTrains")
                        .HasForeignKey("Transport.Domain.Entities.TicketTrain", "PassergerForTrainId");

                    b.Navigation("PassergerForTrain");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.OrderTicketTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.OrderForTrain", "OrederForTrain")
                        .WithMany("OrderTicketTrains")
                        .HasForeignKey("OrederForTrainId");

                    b.Navigation("OrederForTrain");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.PassengerForTrain", b =>
                {
                    b.HasOne("Transport.Domain.Entities.Traine_Entities.OrderTicketTrain", "OrderTicketTrain")
                        .WithMany("PassengerForTrains")
                        .HasForeignKey("OrderTicketTrainId");

                    b.Navigation("OrderTicketTrain");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Admin", b =>
                {
                    b.HasOne("Transport.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Transport.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transport.Domain.Entities.Airline", b =>
                {
                    b.Navigation("PlaceAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForAirline", b =>
                {
                    b.Navigation("OrderTicketAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForBus", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderForTrain", b =>
                {
                    b.Navigation("OrderTicketTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.OrderTicketAirline", b =>
                {
                    b.Navigation("PassengerForAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.PassengerForAirline", b =>
                {
                    b.Navigation("TicketAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketAirline", b =>
                {
                    b.Navigation("PlaceAirlines");
                });

            modelBuilder.Entity("Transport.Domain.Entities.TicketTrain", b =>
                {
                    b.Navigation("PlaceTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Train", b =>
                {
                    b.Navigation("PlaceTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.OrderTicketTrain", b =>
                {
                    b.Navigation("PassengerForTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.Traine_Entities.PassengerForTrain", b =>
                {
                    b.Navigation("TicketTrains");
                });

            modelBuilder.Entity("Transport.Domain.Entities.User", b =>
                {
                    b.Navigation("OrderForAirlines");

                    b.Navigation("OrderForBuses");

                    b.Navigation("OrderForTrains");
                });
#pragma warning restore 612, 618
        }
    }
}
